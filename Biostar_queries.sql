
-- ** Schema Design : Implementing Bio-Star Schema
-- *** PART 1 ***

DROP TABLE IF EXISTS DIAG;
SELECT * FROM DIAG;
CREATE TABLE DIAG (ds_id VARCHAR2(26 BYTE), p_id VARCHAR2(26 BYTE), sympton VARCHAR2(26 BYTE), ds_from_date VARCHAR2(26 BYTE), ds_to_date VARCHAR2(26 BYTE)); 
 -- Fill the DIAG table
INSERT INTO DIAG (ds_id, p_id, sympton, ds_from_date, ds_to_date)  
SELECT ds_id, p_id, sympton, ds_from_date, ds_to_date
  FROM clinical_fact_clean group by ds_id, p_id, sympton, ds_from_date, ds_to_date;
  
DROP TABLE IF EXISTS DRUG_USAGE;
SELECT * FROM DRUG_USAGE;
CREATE TABLE DRUG_USAGE (dr_id VARCHAR2(26 BYTE), p_id VARCHAR2(26 BYTE), dosage VARCHAR2(26 BYTE), dr_from_date VARCHAR2(26 BYTE), dr_to_date VARCHAR2(26 BYTE));
-- Fill the DRUG USAGE TABLE 
INSERT INTO DRUG_USAGE (dr_id, p_id, dosage, dr_from_date, dr_to_date)  
SELECT dr_id, p_id, dosage, dr_from_date, dr_to_date
  FROM clinical_fact_clean group by dr_id, p_id, dosage, dr_from_date, dr_to_date;

DROP TABLE IF EXISTS test_result;
CREATE TABLE test_result (tt_id VARCHAR2(26 BYTE), p_id VARCHAR2(26 BYTE), result VARCHAR2(26 BYTE), tt_date VARCHAR2(26 BYTE));
-- Fill test_result
INSERT INTO test_result (tt_id, p_id, result, tt_date)  
SELECT tt_id, p_id, result, tt_date
  FROM clinical_fact_clean group by tt_id, p_id, result, tt_date;
  
-- Add PatientId to Sample
ALTER TABLE sample
ADD p_id VARCHAR2(26 BYTE);
-- Fill p_id
UPDATE sample INNER JOIN clinical_fact_clean ON sample.s_id = clinical_fact_clean.s_id SET sample.p_id = clinical_fact_clean.p_id;

--- Biostar for Sample Data Space
DROP TABLE IF EXISTS GENE_DATA;
CREATE TABLE GENE_DATA (mk_id VARCHAR2(26 BYTE), s_id VARCHAR2(26 BYTE), mk_result VARCHAR2(26 BYTE), 
mk_date VARCHAR2(26 BYTE));
INSERT INTO GENE_DATA (mk_id, s_id, mk_result, mk_date)  
SELECT mk_id, s_id, mk_result, mk_date
  FROM sample_fact group by mk_id, s_id, mk_result, mk_date;
  
DROP TABLE IF EXISTS ASSAY_INFO;
CREATE TABLE ASSAY_INFO (as_id VARCHAR2(26 BYTE), s_id VARCHAR2(26 BYTE), as_result VARCHAR2(26 BYTE), 
as_date VARCHAR2(26 BYTE));
INSERT INTO ASSAY_INFO (as_id, s_id, as_result, as_date)  
SELECT as_id, s_id, as_result, as_date
  FROM sample_fact group by as_id, s_id, as_result, as_date;
  
DROP TABLE IF EXISTS SAMPLE_DESCRIPTION;
CREATE TABLE SAMPLE_DESCRIPTION (tm_id VARCHAR2(26 BYTE), s_id VARCHAR2(26 BYTE), tm_description VARCHAR2(26 BYTE));
INSERT INTO SAMPLE_DESCRIPTION (tm_id, s_id, tm_description)  
SELECT tm_id, s_id, tm_description FROM sample_fact group by tm_id, s_id, tm_description;

--- *** Biostar for Gene Data Space ***
DROP TABLE IF EXISTS go_annotation;
CREATE TABLE go_annotation (go_id VARCHAR2(26 BYTE), U_ID VARCHAR2(26 BYTE));
INSERT INTO go_annotation (go_id, U_ID) SELECT go_id, U_ID FROM gene_fact group by go_id, U_ID;

DROP TABLE IF EXISTS gene_cluster;
CREATE TABLE gene_cluster (cl_id VARCHAR2(26 BYTE), U_ID VARCHAR2(26 BYTE));
INSERT INTO gene_cluster (cl_id, U_ID) SELECT cl_id, U_ID FROM gene_fact group by cl_id, U_ID;

DROP TABLE IF EXISTS gene_domain;
CREATE TABLE gene_domain (dm_id VARCHAR2(26 BYTE), U_ID VARCHAR2(26 BYTE));
INSERT INTO gene_domain (dm_id, U_ID) SELECT dm_id, U_ID FROM gene_fact group by dm_id, U_ID;

-- Add PatientId to Sample
ALTER TABLE promoter
ADD U_ID VARCHAR2(26 BYTE);
SET SQL_SAFE_UPDATES=1;
UPDATE promoter INNER JOIN gene_fact ON promoter.pm_id = gene_fact.pm_id SET promoter.UID = gene_fact.UID;

SET SQL_SAFE_UPDATES=1;


-- Data Warehouse to support OLAP operations USING BIOSTAR SCHEMA *** 
-- PART 2
-- Query 2.1 a)
-- SELECT * FROM DIAG
SELECT COUNT(DISTINCT DG.P_ID) AS NO_OF_PATIENTS FROM DIAG DG, DISEASE DS WHERE DG.DS_ID = DS.DS_ID AND DS.DESCRIPTION = 'tumor'
--output = > 53 rows 

-- Query 2.1 b)
SELECT COUNT(DISTINCT DG.P_ID) AS NO_OF_PATIENTS FROM DIAG DG, DISEASE DS WHERE DG.DS_ID = DS.DS_ID AND DS.TYPE = 'leukemia'
--output = > 27 rows

-- Query 2.1 c)
SELECT COUNT(DISTINCT DG.P_ID) AS NO_OF_PATIENTS FROM DIAG DG, DISEASE DS WHERE DG.DS_ID = DS.DS_ID AND DS.NAME = 'ALL'
--output = > 13 rows

-- Query 2.2
SELECT distinct DG.TYPE FROM DIAG DI, DRUG DG, DISEASE DS, DRUG_USAGE DU WHERE DU.P_ID = DI.P_ID AND DS.DS_ID = DI.DS_ID AND DG.DR_ID = DU.DR_ID AND DS.DESCRIPTION = 'tumor' ORDER BY DG.TYPE;
-- output = > 20 drug types returned

-- Query 2.3

SELECT S_ID, EXP from MICROARRAY_FACT WHERE MU_ID = '001' AND S_ID IN (SELECT S_ID FROM SAMPLE WHERE P_ID  IN (SELECT P_ID FROM DIAG WHERE DS_ID IN (SELECT DS_ID FROM DISEASE WHERE DISEASE.NAME = 'ALL')))
AND PB_ID IN (SELECT PB_ID FROM PROBE WHERE U_ID IN (SELECT U_ID FROM GENE_CLUSTER WHERE GENE_CLUSTER.CL_ID = '00002')) ORDER BY S_ID;

-- Query 2.4  

-- DROP TABLE EXPRESSIONS
-- DROP VIEW EXPRESSION_ALL
-- DROP VIEW EXPRESSION_NOT_ALL
-- SELECT * FROM EXPRESSIONS ORDER BY NAMES;

CREATE TABLE EXPRESSIONS(NAMES VARCHAR2(26 BYTE),EXP_VALUES NUMBER)

CREATE VIEW EXPRESSION_ALL(NAMES,EXP_ALL) AS (SELECT 'ALL EXPRESSION VALUES',EXP as EXP_ALL FROM MICROARRAY_FACT WHERE PB_ID IN (SELECT PB_ID FROM PROBE WHERE U_ID IN (SELECT U_ID FROM GO_ANNOTATION where GO_ID = '0012502'))
AND S_ID IN (SELECT S_ID FROM SAMPLE WHERE P_ID IN (SELECT P_ID FROM DIAG WHERE DS_ID IN (SELECT DS_ID FROM DISEASE WHERE DISEASE.NAME = 'ALL'))));

INSERT INTO EXPRESSIONS (SELECT NAMES,EXP_ALL FROM EXPRESSION_ALL)

CREATE VIEW EXPRESSION_NOT_ALL(NAMES,EXP_NOT_ALL) AS (SELECT 'NOT ALL EXPRESSION VALUES', EXP as EXP_NOT_ALL FROM MICROARRAY_FACT WHERE PB_ID IN (SELECT PB_ID FROM PROBE WHERE U_ID IN (SELECT U_ID FROM GO_ANNOTATION where GO_ID = '0012502'))
AND S_ID IN (SELECT S_ID FROM SAMPLE WHERE P_ID IN (SELECT P_ID FROM DIAG WHERE DS_ID  IN (SELECT DS_ID FROM DISEASE WHERE DISEASE.NAME != 'ALL'))));

INSERT INTO EXPRESSIONS (SELECT NAMES,EXP_NOT_ALL FROM EXPRESSION_NOT_ALL)

-- Assuming equal variance for T-test and 2-sided P-value
SELECT STATS_T_TEST_INDEP(NAMES,EXP_VALUES,'STATISTIC','ALL EXPRESSION VALUES') AS T_VALUE, STATS_T_TEST_INDEP(NAMES,EXP_VALUES) AS TWO_SIDED_P_VALUE  FROM EXPRESSIONS; 
-- t-test: -1.00712677
-- p-value = .314065698

-- Query 2.5
 DROP TABLE F_STATISTICS
CREATE TABLE F_STATISTICS(NAMES VARCHAR2(26 BYTE),EXP_VALUES NUMBER)

INSERT INTO F_STATISTICS (SELECT 'ALL', EXP as EXP_ALL FROM MICROARRAY_FACT WHERE PB_ID IN (SELECT PB_ID FROM PROBE WHERE U_ID IN (SELECT U_ID FROM GO_ANNOTATION where GO_ID = '0007154'))
AND S_ID IN (SELECT S_ID FROM SAMPLE WHERE P_ID IN (SELECT P_ID FROM DIAG WHERE DS_ID IN (SELECT DS_ID FROM DISEASE WHERE DISEASE.NAME = 'ALL'))));

INSERT INTO F_STATISTICS (SELECT 'AML', EXP as EXP_AML FROM MICROARRAY_FACT WHERE PB_ID IN (SELECT PB_ID FROM PROBE WHERE U_ID IN (SELECT U_ID FROM GO_ANNOTATION where GO_ID = '0007154'))
AND S_ID IN (SELECT S_ID FROM SAMPLE WHERE P_ID IN (SELECT P_ID FROM DIAG WHERE DS_ID = (SELECT DS_ID FROM DISEASE WHERE DISEASE.NAME = 'AML'))));

INSERT INTO F_STATISTICS (SELECT 'Colon tumor', EXP as EXP_COLON FROM MICROARRAY_FACT WHERE PB_ID IN (SELECT PB_ID FROM PROBE WHERE U_ID IN (SELECT U_ID FROM GO_ANNOTATION where GO_ID = '0007154'))
AND S_ID IN (SELECT S_ID FROM SAMPLE WHERE P_ID IN (SELECT P_ID FROM DIAG WHERE DS_ID = (SELECT DS_ID FROM DISEASE WHERE DISEASE.NAME = 'Colon tumor'))));

INSERT INTO F_STATISTICS (SELECT 'Breast tumor', EXP as EXP_BREAST FROM MICROARRAY_FACT WHERE PB_ID IN (SELECT PB_ID FROM PROBE WHERE U_ID IN (SELECT U_ID FROM GO_ANNOTATION where GO_ID = '0007154'))
AND S_ID IN (SELECT S_ID FROM SAMPLE WHERE P_ID IN (SELECT P_ID FROM DIAG WHERE DS_ID = (SELECT DS_ID FROM DISEASE WHERE DISEASE.NAME = 'Breast tumor'))));

SELECT STATS_ONE_WAY_ANOVA(NAMES,EXP_VALUES,'F_RATIO') AS F_VALUE, STATS_ONE_WAY_ANOVA(NAMES,EXP_VALUES,'SIG') AS TWO_SIDED_P_VALUE FROM F_STATISTICS;
-- F-value = 3.1389121  P-value = 0.024681500

 -- Query 2.6 
 DROP VIEW VIEW_AML
 DROP VIEW VIEW_ALL
 DROP VIEW TEMP_VIEW 
 SELECT * FROM VIEW_ALL
 SELECT COUNT(*) FROM VIEW_AML
 SELECT COUNT(*) FROM TEMP_VIEW

CREATE VIEW TEMP_VIEW(P_ID,S_ID,NAMES) AS SELECT CF.P_ID, CF.S_ID, DS.NAME FROM CLINICAL_FACT_CLEAN CF, DISEASE DS WHERE DS.DS_ID = CF.DS_ID

CREATE VIEW VIEW_ALL(P_ID, EXP_ALL, PB_ID) AS (SELECT T1.P_ID AS P_ID, MF.EXP AS EXP_ALL, MF.PB_ID AS PB_ID FROM MICROARRAY_FACT MF, GO_ANNOTATION GA, TEMP_VIEW T1, PROBE PB WHERE T1.NAMES='ALL' AND GA.GO_ID = '0007154' AND T1.S_ID = MF.S_ID AND PB.U_ID = GA.U_ID AND MF.PB_ID = PB.PB_ID GROUP BY MF.EXP, T1.P_ID, MF.PB_ID);

CREATE VIEW VIEW_AML(P_ID, EXP_AML, PB_ID) AS (SELECT T1.P_ID AS P_ID, MF.EXP AS EXP_AML, MF.PB_ID AS PB_ID FROM MICROARRAY_FACT MF, GO_ANNOTATION GA, TEMP_VIEW T1, PROBE PB WHERE T1.NAMES='AML' AND GA.GO_ID = '0007154' AND T1.S_ID = MF.S_ID AND PB.U_ID = GA.U_ID AND MF.PB_ID = PB.PB_ID GROUP BY MF.EXP, T1.P_ID, MF.PB_ID);

--- CORRELATION BETWEEN 'ALL' AND 'AML'
SELECT AVG(CORR(TABLE1.EXP_ALL,TABLE2.EXP_ALL)) AS CORRELATION_VALUE FROM (SELECT P_ID, EXP_ALL, PB_ID FROM VIEW_ALL) TABLE1, (SELECT P_ID, EXP_ALL, PB_ID FROM VIEW_ALL) TABLE2 WHERE TABLE1.PB_ID = TABLE2.PB_ID GROUP BY TABLE1.P_ID, TABLE2.P_ID;

--- CORRELATION BETWEEN 'ALL' AND 'AML'
SELECT AVG(CORR(TABLE1.EXP_ALL,TABLE2.EXP_AML)) AS CORRELATION_VALUE FROM (SELECT P_ID, EXP_ALL, PB_ID FROM VIEW_ALL) TABLE1, (SELECT P_ID, EXP_AML, PB_ID FROM VIEW_AML) TABLE2 WHERE TABLE1.PB_ID = TABLE2.PB_ID GROUP BY TABLE1.P_ID, TABLE2.P_ID;


-- *** PART 3.1 ***
-- DROP VIEW MAIN_VIEW_NOT_ALL
-- DROP VIEW MAIN_VIEW_ALL
-- DROP TABLE GENES
-- DROP TABLE INFO_GENES
CREATE TABLE GENES(CATGY VARCHAR2(26 BYTE),EXP_VALUES NUMBER, U_ID NUMBER)
CREATE TABLE INFO_GENES(U_ID NUMBER)

-- MAIN_VIEW_ALL view - gets expression values for each gene for all the patients with 'ALL'
CREATE VIEW MAIN_VIEW_ALL(PB_ID,EXP_ALL)AS (SELECT MF.PB_ID, MF.EXP FROM MICROARRAY_FACT MF WHERE MF.S_ID IN (SELECT S_ID FROM SAMPLE WHERE P_ID IN (SELECT P_ID FROM DIAG WHERE DS_ID IN (SELECT DS_ID FROM DISEASE WHERE NAME = 'ALL'))))

-- MAIN_VIEW_NOT_ALL view - gets expression values for each gene for all the patients without 'ALL'
CREATE VIEW MAIN_VIEW_NOT_ALL(PB_ID,EXP_NOT_ALL)AS (SELECT MF.PB_ID, MF.EXP FROM MICROARRAY_FACT MF WHERE MF.S_ID IN (SELECT S_ID FROM SAMPLE WHERE P_ID IN (SELECT P_ID FROM DIAG WHERE DS_ID IN (SELECT DS_ID FROM DISEASE WHERE NAME != 'ALL'))))

INSERT INTO GENES (SELECT 'ALL', MV.EXP_ALL, PB.U_ID FROM MAIN_VIEW_ALL MV,PROBE PB WHERE PB.PB_ID = MV.PB_ID)
INSERT INTO GENES (SELECT 'NOT ALL', MV.EXP_NOT_ALL, PB.U_ID FROM MAIN_VIEW_NOT_ALL MV,PROBE PB WHERE PB.PB_ID = MV.PB_ID)

-- This query gives return the UID's of the informative genes i.e whose 'P' value is smaller than 0.01
SELECT U_ID FROM (SELECT U_ID, STATS_T_TEST_INDEP(CATGY,EXP_VALUES) AS TWO_SIDED_P_VALUE FROM GENES GROUP BY ROLLUP(U_ID) ORDER BY U_ID) T WHERE T.TWO_SIDED_P_VALUE < 0.01
-- INSERT informative genes in Info_genes table to utilise the result in part 3.2
INSERT INTO INFO_GENES (SELECT U_ID FROM (SELECT U_ID, STATS_T_TEST_INDEP(CATGY,EXP_VALUES) AS TWO_SIDED_P_VALUE FROM GENES GROUP BY ROLLUP(U_ID) ORDER BY U_ID) T WHERE T.TWO_SIDED_P_VALUE < 0.01)
-- output => 38 genes classified as Informative Genes

-- *** PART 3.2 ***
--DROP TABLE TAB2
--DROP TABLE TAB1
--DROP VIEW PTS_ALL
--DROP VIEW PTS1
-- MAIN_VIEW_ALL view - gets expression values for each gene for all the patients with 'ALL'
CREATE TABLE TAB1(U_ID VARCHAR2(26 BYTE),P_ID VARCHAR2(26 BYTE), EXP_ALL NUMBER)
CREATE VIEW PTS1(S_ID,P_ID) AS (SELECT S.S_ID,S.P_ID FROM SAMPLE S WHERE S.P_ID IN (SELECT P_ID FROM DIAG WHERE DS_ID IN (SELECT DS_ID FROM DISEASE WHERE NAME = 'ALL'))) 
CREATE VIEW PTS_ALL(P_ID, EXP, PB_ID) AS (SELECT P.P_ID, M.EXP, M.PB_ID FROM PTS1 P, MICROARRAY_FACT M WHERE M.S_ID = P.S_ID)
INSERT INTO TAB1 (SELECT P.U_ID, X.P_ID, X.EXP FROM PTS_ALL X, PROBE P WHERE P.PB_ID = X.PB_ID)

-- MAIN_VIEW_ALL view - gets expression values for each gene for all the patients without 'ALL'
CREATE TABLE TAB2(U_ID VARCHAR2(26 BYTE),P_ID VARCHAR2(26 BYTE), EXP_NOT_ALL NUMBER)
CREATE VIEW PTS2(S_ID,P_ID) AS (SELECT S.S_ID,S.P_ID FROM SAMPLE S WHERE S.P_ID IN (SELECT P_ID FROM DIAG WHERE DS_ID IN (SELECT DS_ID FROM DISEASE WHERE NAME != 'ALL'))) 
CREATE VIEW PTS_NOT_ALL(P_ID, EXP, PB_ID) AS (SELECT P.P_ID, M.EXP, M.PB_ID FROM PTS2 P, MICROARRAY_FACT M WHERE M.S_ID = P.S_ID)
INSERT INTO TAB2 (SELECT P.U_ID, X.P_ID, X.EXP FROM PTS_NOT_ALL X, PROBE P WHERE P.PB_ID = X.PB_ID)

UPDATE TEST_SAMPLES SET TEST_SAMPLES.U_ID = LPAD(TEST_SAMPLES.U_ID,10,0)
SELECT * FROM TEST_SAMPLES

DROP TABLE PATIENT1;
DROP TABLE PATIENT2;
DROP TABLE PATIENT3;
DROP TABLE PATIENT4;
DROP TABLE PATIENT5;

CREATE TABLE PATIENT1(I_D VARCHAR2(26 BYTE), U_ID VARCHAR2(26 BYTE), EXP NUMBER);
CREATE TABLE PATIENT2(I_D VARCHAR2(26 BYTE), U_ID VARCHAR2(26 BYTE), EXP NUMBER);
CREATE TABLE PATIENT3(I_D VARCHAR2(26 BYTE), U_ID VARCHAR2(26 BYTE), EXP NUMBER);
CREATE TABLE PATIENT4(I_D VARCHAR2(26 BYTE), U_ID VARCHAR2(26 BYTE), EXP NUMBER);
CREATE TABLE PATIENT5(I_D VARCHAR2(26 BYTE), U_ID VARCHAR2(26 BYTE), EXP NUMBER);

INSERT INTO PATIENT1 (SELECT '1', TS.U_ID, TS.TEST1 FROM TEST_SAMPLES TS);
INSERT INTO PATIENT2 (SELECT '2', TS.U_ID, TS.TEST2 FROM TEST_SAMPLES TS);
INSERT INTO PATIENT3 (SELECT '3', TS.U_ID, TS.TEST3 FROM TEST_SAMPLES TS);
INSERT INTO PATIENT4 (SELECT '4', TS.U_ID, TS.TEST4 FROM TEST_SAMPLES TS);
INSERT INTO PATIENT5 (SELECT '5', TS.U_ID, TS.TEST5 FROM TEST_SAMPLES TS);

DROP TABLE PATIENT_CLASSIFICATION1;
CREATE TABLE PATIENT_CLASSIFICATION1 (CATEGORY VARCHAR2(26 BYTE), CORRELATION NUMBER);
INSERT INTO PATIENT_CLASSIFICATION1 (SELECT 'ALL', CORR(Z1.EXP_ALL, Z2.EXP) AS CORRELATION_RA FROM (SELECT U_ID, P_ID, EXP_ALL FROM TAB1 WHERE U_ID IN (SELECT U_ID FROM INFO_GENES)) Z1, (SELECT I_D, U_ID, EXP FROM PATIENT1 WHERE U_ID IN (SELECT U_ID FROM INFO_GENES)) Z2 WHERE Z1.U_ID = Z2.U_ID GROUP BY Z1.P_ID, Z2.I_D);
INSERT INTO PATIENT_CLASSIFICATION1 (SELECT 'NOT_ALL', CORR(Z1.EXP_NOT_ALL, Z2.EXP) AS CORRELATION_RB FROM (SELECT U_ID, P_ID, EXP_NOT_ALL FROM TAB2 WHERE U_ID IN (SELECT U_ID FROM INFO_GENES)) Z1, (SELECT I_D, U_ID, EXP FROM PATIENT1 WHERE U_ID IN (SELECT U_ID FROM INFO_GENES)) Z2 WHERE Z1.U_ID = Z2.U_ID GROUP BY Z1.P_ID, Z2.I_D);
SELECT STATS_T_TEST_INDEP(CATEGORY, CORRELATION, 'STATISTIC', 'ALL') AS T_OBSERVED, STATS_T_TEST_INDEP(CATEGORY,CORRELATION) TWO_SIDED_P_VALUE FROM PATIENT_CLASSIFICATION1;
-- Patient1 is classified as 'ALL' as p-value is smaller than 0.01.  t-value: 18.4751  p-value: 0.000000000000000000000003019397577629577

DROP TABLE PATIENT_CLASSIFICATION2
CREATE TABLE PATIENT_CLASSIFICATION2 (CATEGORY VARCHAR2(26 BYTE), CORRELATION NUMBER)
INSERT INTO PATIENT_CLASSIFICATION2 (SELECT 'ALL', CORR(Z1.EXP_ALL, Z2.EXP) AS CORRELATION_RA FROM (SELECT U_ID, P_ID, EXP_ALL FROM TAB1 WHERE U_ID IN (SELECT U_ID FROM INFO_GENES)) Z1, (SELECT I_D, U_ID, EXP FROM PATIENT2 WHERE U_ID IN (SELECT U_ID FROM INFO_GENES)) Z2 WHERE Z1.U_ID = Z2.U_ID GROUP BY Z1.P_ID, Z2.I_D);
INSERT INTO PATIENT_CLASSIFICATION2 (SELECT 'NOT_ALL', CORR(Z1.EXP_NOT_ALL, Z2.EXP) AS CORRELATION_RB FROM (SELECT U_ID, P_ID, EXP_NOT_ALL FROM TAB2 WHERE U_ID IN (SELECT U_ID FROM INFO_GENES)) Z1, (SELECT I_D, U_ID, EXP FROM PATIENT2 WHERE U_ID IN (SELECT U_ID FROM INFO_GENES)) Z2 WHERE Z1.U_ID = Z2.U_ID GROUP BY Z1.P_ID, Z2.I_D);
SELECT STATS_T_TEST_INDEP(CATEGORY, CORRELATION, 'STATISTIC', 'ALL') AS T_OBSERVED, STATS_T_TEST_INDEP(CATEGORY,CORRELATION) TWO_SIDED_P_VALUE FROM PATIENT_CLASSIFICATION2;
-- Patient2 is classified as 'ALL' as p-value is smaller than 0.01.  t-value: 6.5082  p-value: 0.000000032547484661996683

DROP TABLE PATIENT_CLASSIFICATION3
CREATE TABLE PATIENT_CLASSIFICATION3 (CATEGORY VARCHAR2(26 BYTE), CORRELATION NUMBER)
INSERT INTO PATIENT_CLASSIFICATION3 (SELECT 'ALL', CORR(Z1.EXP_ALL, Z2.EXP) AS CORRELATION_RA FROM (SELECT U_ID, P_ID, EXP_ALL FROM TAB1 WHERE U_ID IN (SELECT U_ID FROM INFO_GENES)) Z1, (SELECT I_D, U_ID, EXP FROM PATIENT3 WHERE U_ID IN (SELECT U_ID FROM INFO_GENES)) Z2 WHERE Z1.U_ID = Z2.U_ID GROUP BY Z1.P_ID, Z2.I_D)
INSERT INTO PATIENT_CLASSIFICATION3 (SELECT 'NOT_ALL', CORR(Z1.EXP_NOT_ALL, Z2.EXP) AS CORRELATION_RB FROM (SELECT U_ID, P_ID, EXP_NOT_ALL FROM TAB2 WHERE U_ID IN (SELECT U_ID FROM INFO_GENES)) Z1, (SELECT I_D, U_ID, EXP FROM PATIENT3 WHERE U_ID IN (SELECT U_ID FROM INFO_GENES)) Z2 WHERE Z1.U_ID = Z2.U_ID GROUP BY Z1.P_ID, Z2.I_D)
SELECT STATS_T_TEST_INDEP(CATEGORY, CORRELATION, 'STATISTIC', 'ALL') AS T_OBSERVED, STATS_T_TEST_INDEP(CATEGORY,CORRELATION) TWO_SIDED_P_VALUE FROM PATIENT_CLASSIFICATION3
-- Patient3 is NOT classified as 'ALL' as p-value is larger than 0.01.  t-value: -0.28923  p-value: 0.77357051847177338

DROP TABLE PATIENT_CLASSIFICATION4
CREATE TABLE PATIENT_CLASSIFICATION4 (CATEGORY VARCHAR2(26 BYTE), CORRELATION NUMBER)
INSERT INTO PATIENT_CLASSIFICATION4 (SELECT 'ALL', CORR(Z1.EXP_ALL, Z2.EXP) AS CORRELATION_RA FROM (SELECT U_ID, P_ID, EXP_ALL FROM TAB1 WHERE U_ID IN (SELECT U_ID FROM INFO_GENES)) Z1, (SELECT I_D, U_ID, EXP FROM PATIENT4 WHERE U_ID IN (SELECT U_ID FROM INFO_GENES)) Z2 WHERE Z1.U_ID = Z2.U_ID GROUP BY Z1.P_ID, Z2.I_D)
INSERT INTO PATIENT_CLASSIFICATION4 (SELECT 'NOT_ALL', CORR(Z1.EXP_NOT_ALL, Z2.EXP) AS CORRELATION_RB FROM (SELECT U_ID, P_ID, EXP_NOT_ALL FROM TAB2 WHERE U_ID IN (SELECT U_ID FROM INFO_GENES)) Z1, (SELECT I_D, U_ID, EXP FROM PATIENT4 WHERE U_ID IN (SELECT U_ID FROM INFO_GENES)) Z2 WHERE Z1.U_ID = Z2.U_ID GROUP BY Z1.P_ID, Z2.I_D)
SELECT STATS_T_TEST_INDEP(CATEGORY, CORRELATION, 'STATISTIC', 'ALL') AS T_OBSERVED, STATS_T_TEST_INDEP(CATEGORY,CORRELATION) TWO_SIDED_P_VALUE FROM PATIENT_CLASSIFICATION4
-- Patient4 is classified as 'ALL' as p-value is smaller than 0.01.  t-value: 19.1605  p-value: 0.00000000000000000000000059265057752089657

DROP TABLE PATIENT_CLASSIFICATION5
CREATE TABLE PATIENT_CLASSIFICATION5 (CATEGORY VARCHAR2(26 BYTE), CORRELATION NUMBER)
INSERT INTO PATIENT_CLASSIFICATION5 (SELECT 'ALL', CORR(Z1.EXP_ALL, Z2.EXP) AS CORRELATION_RA FROM (SELECT U_ID, P_ID, EXP_ALL FROM TAB1 WHERE U_ID IN (SELECT U_ID FROM INFO_GENES)) Z1, (SELECT I_D, U_ID, EXP FROM PATIENT5 WHERE U_ID IN (SELECT U_ID FROM INFO_GENES)) Z2 WHERE Z1.U_ID = Z2.U_ID GROUP BY Z1.P_ID, Z2.I_D)
INSERT INTO PATIENT_CLASSIFICATION5 (SELECT 'NOT_ALL', CORR(Z1.EXP_NOT_ALL, Z2.EXP) AS CORRELATION_RB FROM (SELECT U_ID, P_ID, EXP_NOT_ALL FROM TAB2 WHERE U_ID IN (SELECT U_ID FROM INFO_GENES)) Z1, (SELECT I_D, U_ID, EXP FROM PATIENT5 WHERE U_ID IN (SELECT U_ID FROM INFO_GENES)) Z2 WHERE Z1.U_ID = Z2.U_ID GROUP BY Z1.P_ID, Z2.I_D)
SELECT STATS_T_TEST_INDEP(CATEGORY, CORRELATION, 'STATISTIC', 'ALL') AS T_OBSERVED, STATS_T_TEST_INDEP(CATEGORY,CORRELATION) TWO_SIDED_P_VALUE FROM PATIENT_CLASSIFICATION5
-- Patient5 is classified as 'ALL' as p-value is smaller than 0.01.  t-value: -3.03095  p-value: 0.0038238123330604787